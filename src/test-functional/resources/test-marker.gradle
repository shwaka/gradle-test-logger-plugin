ext.markerLevel = 'lifecycle'
ext.printFirstNewLine = true

LogLevel getMarkerLevel() {
    LogLevel.valueOf(project.property('markerLevel').toString().toUpperCase())
}

boolean getPrintFirstNewLine() {
    project.property('printFirstNewLine').asBoolean()
}

tasks.withType(Test) {
    boolean started = false
    def suites = []

    beforeSuite { suite ->
        if (suite.className?.startsWith('com.adarshr') && !started) {
            started = true
            logger.log markerLevel, '__START__'
        }
        if (suite.className?.startsWith('com.adarshr') && !suites.contains(suite.className)) {
            logger.log markerLevel, "__SUITE=${suite.className}__"
            suites << suite.className
        }
    }

    afterTest { suite, result ->
        if (suite.className.startsWith('com.adarshr') &&
            result.resultType == TestResult.ResultType.SUCCESS && test.testlogger.showPassed ||
            result.resultType == TestResult.ResultType.SKIPPED && test.testlogger.showSkipped ||
            result.resultType == TestResult.ResultType.FAILURE && test.testlogger.showFailed) {

            logger.log markerLevel, "__TEST=${suite.className}:${suite.name}__${printFirstNewLine ? '\n' : ''}"

            if (printFirstNewLine) {
                printFirstNewLine = false
            }
        }
    }

    afterSuite { suite, result ->
        if (!suite.parent) {
            logger.log markerLevel, '__SUMMARY__'
        }
    }

    // Do after evaluate to make sure this listener comes after the plugin's
    afterEvaluate {
        afterSuite { suite, result ->
            if (!suite.parent) {
                logger.log markerLevel, '__END__'
            }
        }
    }
}
